import pandas as pd
import re
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.ticker import MultipleLocator

"""
    注: 市场消息面修正信号: keywords 分析
    升浪跌浪判别
"""


class stock_ohlc:
    """A class contains a stock's ohlc"""
    o = list()
    h = list()
    l = list()
    c = list()
    t = list()
    v = list()
    d = list()

    def __init__(self, o, h, l, c, t, v, d):
        # make ohlc in a list, including time series, vol and deal
        self.o.append(o)
        self.h.append(h)
        self.l.append(l)
        self.c.append(c)
        self.t.append(t)
        self.v.append(v)
        self.d.append(d)


class factor:
    """A class contains a stock's factor"""
    # avrp stands for the deal avrage price
    avrp = list()
    # arip stands for arithmetic price by high and low
    arip = list()
    # mav stands for moving average price by n days close price
    mav = list()
    # box stands for close price positon ratio in last 10 days
    box = list()

    def __init__(self, avrp, arip, mav, box):
        self.avrp.append(avrp)
        self.arip.append(arip)
        self.mav.append(mav)
        self.box.append(box)


def csv_wash(csvpath):
    """Return dayline dataframe, dealing with the .csv fetched
    from NetEase source."""
    # fix path isuue
    csvpath = re.sub(r'["& \']', "", csvpath)
    dayline = pd.read_csv(csvpath)
    # sort by time series
    dayline.sort_values(by='日期', inplace=True)
    return dayline


def chart(dayline, stock_name):
    """A chart with factor costumed"""
    stock_name = stock_name + dayline.iloc[1, 2]
    # fig size
    fig = plt.figure(figsize=(16, 10))
    # dayline lenth
    lenth = len(dayline)
    # make ohlc a list, using iloc for time-sorted values
    for i in range(lenth):
        _ohlc = stock_ohlc(o=dayline.iloc[i, 6],
                           h=dayline.iloc[i, 4],
                           l=dayline.iloc[i, 5],
                           c=dayline.iloc[i, 3],
                           t=dayline.iloc[i, 0],
                           v=dayline.iloc[i, 11],
                           d=dayline.iloc[i, 12])
    # make factor a list
    for i in range(lenth):
        if i < 10:
            _factor = factor(avrp=_ohlc.d[i]/_ohlc.v[i],
                             arip=(_ohlc.h[i]+_ohlc.l[i])/2,
                             mav=dayline.iloc[i, 3],
                             box=(dayline.iloc[i, 3] - dayline.iloc[0: i + 1, 5].min()) /
                             (dayline.iloc[0: i + 1, 4].max() - dayline.iloc[0: i + 1, 5].min()))
        else:
            _factor = factor(avrp=_ohlc.d[i]/_ohlc.v[i],
                             arip=(_ohlc.h[i]+_ohlc.l[i])/2,
                             mav=dayline.iloc[i, 3],
                             box=(dayline.iloc[i, 3] - dayline.iloc[i - 9: i + 1, 5].min()) /
                             (dayline.iloc[i - 9: i + 1, 4].max() - dayline.iloc[i - 9: i + 1, 5].min()))
    del dayline

    # ohlc_chart postion
    ax_1 = plt.subplot2grid((4, 4), (0, 0), rowspan=3, colspan=4)
    # grid
    plt.grid(True, which='both', ls='dashed')
    # basic_ohlc
    # generating a list of height
    _height = list(_ohlc.c[i] - _ohlc.o[i] for i in range(lenth))
    for i in range(0, lenth):
        # if open >= close price, make the candle red
        if _height[i] >= 0:
            plt.vlines(x=i, ymin=_ohlc.l[i], ymax=_ohlc.h[i], color='red')
            plt.bar(x=i, height=_height[i], width=0.8,
                    bottom=_ohlc.o[i], color='red')
        else:
            plt.vlines(x=i, ymin=_ohlc.l[i], ymax=_ohlc.h[i], color='green')
            plt.bar(x=i, height=_height[i], width=0.8,
                    bottom=_ohlc.o[i], color='green')

    # avrp and arip line
    plt.plot(np.arange(0, lenth, 1), _factor.avrp,
             linewidth=.7, color='orange', marker='o', markersize=.7, label='成交平均价')
    plt.plot(np.arange(0, lenth, 1), _factor.arip,
             linewidth=.7, color='purple', marker='o', markersize=.7, label='算数平均价')

    # moving average line by close price
    print('mav?[y]or[n]', end='')
    _jx = input()
    if _jx == 'y':
        print('how many?', end='')
        mav_num = int(input())
        for i in range(mav_num):
            print('mav daylen[', i, ']= ', end='')
            daylen = int(input())
            for j in range(daylen, lenth):
                mav_sum = 0
                for k in range(daylen):
                    mav_sum += _ohlc.c[1 + j + k - daylen]
                _factor.mav[j] = mav_sum / daylen
            # here add average line and point
            plt.plot(np.arange(0, lenth, 1), _factor.mav, linewidth=.7, marker='o',
                     markersize=.7, label=str(daylen) + '日线')

    # label location
    plt.legend(loc='best')

    # k is generated by avrp, which shows money flow in short term's behaviours
    k = list()
    k.append(0)
    for i in range(1, lenth):
        k.append(_factor.avrp[i] - _factor.avrp[i - 1])
    e_rpt_s = list()
    # the x day n days before
    n = 2  # 2 days
    for x in range(lenth - n):
        # if the k has the same sign
        if k[lenth - 1 - x] * k[lenth - 2 - x] > 0:
            # speed up if abs(k) is greater
            if abs(k[lenth - 1 - x]) > abs(k[lenth - 2 - x]):
                e_rpt_s.append('加速')
            else:
                e_rpt_s.append('减速')
        else:
            # inverse signal
            for i in range(1, n):
                if k[lenth - 1 - x] * k[lenth - 2 - x - i] <= 0:
                    e_rpt_s.append(str(n) + '日反转')
                else:
                    e_rpt_s.append('')
    for i in range(n):
        e_rpt_s.append('')
    # k tips
    for i in range(lenth):
        plt.text(i, _ohlc.c[i],
                 s=e_rpt_s[lenth - i - 1], color='black', rotation=20)

    # strategy buy point factor
    for i in range(n + 2, lenth):
        # inverse
        # to make sure the real inverse happens
        # 1. red candle
        # 2. avrp-arip cross
        # 3. avrp-arip diff limit
        # 4. box limit by Fibonacci
        if k[i - 1] > 0 and e_rpt_s[lenth - i] == str(n) + '日反转'\
                and _ohlc.c[i - 1] > _ohlc.o[i - 1]\
                and ((_factor.avrp[i - 1] > _factor.arip[i - 1] - 0.01
                        and _factor.avrp[i - 2] - 0.01 < _factor.arip[i - 2])
                    or (_factor.avrp[i - 2] > _factor.arip[i - 2] - 0.01
                        and _factor.avrp[i - 3] - 0.01 < _factor.arip[i - 3]))\
                and _factor.box[i - 1] < 0.618:
            plt.text(i - 1, _ohlc.l[i - 1] - 0.1, s='B1', color='blue')
        # inverse enhance
        # 1. inverse happened before the day
        # 2. red candle
        # 3. speed up happened today
        # 4. avrp-arip diff limit by Fibonacci
        # 5. box limit by Fibonacci
        elif k[i - 2] > 0 and e_rpt_s[lenth - i + 1] == str(n) + '日反转' \
                and _ohlc.c[i - 2] > _ohlc.o[i - 2] \
                and ((_factor.avrp[i - 2] > _factor.arip[i - 2] - 0.01
                        and _factor.avrp[i - 3] - 0.01 < _factor.arip[i - 3])
                    or (_factor.avrp[i - 3] > _factor.arip[i - 3] - 0.01
                        and _factor.avrp[i - 4] - 0.01 < _factor.arip[i - 4]))\
                and e_rpt_s[lenth - i] == '加速' \
                and (_factor.avrp[i - 2] - _factor.arip[i - 2]) / (_factor.avrp[i - 1] - _factor.arip[i - 1]) > 0.618\
                and _factor.box[i - 2] < 0.618\
                and _factor.box[i - 1] < 0.618:
            plt.text(i - 1, _ohlc.l[i - 1] - 0.1, s='B2', color='blue')
        # right trade trending follow
        # 1. at least 2 days k > 0
        # 2. red candle today
        # 3. avrp-arip diff limit by Fibonacci
        elif (k[i - 1] > 0 and _factor.avrp[i - 1] > _factor.arip[i - 1]
                and _ohlc.c[i - 1] > _ohlc.o[i - 1])\
                and (k[i - 2] > 0 and _factor.avrp[i - 2] > _factor.arip[i - 2])\
                and (_factor.avrp[i - 2] - _factor.arip[i - 2]) / (_factor.avrp[i - 1] - _factor.arip[i - 1]) > 0.618:
            plt.text(i - 1, _ohlc.l[i - 1] - 0.1, s='B3', color='blue')
        # high risk right trade by down strike
        elif e_rpt_s[lenth  - i] == str(n) + '日反转'\
            and k[i - 1] < 0\
            and _ohlc.c[i - 1] < _ohlc.o[i - 1]\
            and (_ohlc.c[i - 1] - _ohlc.l[i - 1]) / (_ohlc.o[i - 1] - _ohlc.c[i - 1]) > 1\
            and _factor.box[i - 1] < 0.618:
            plt.text(i - 1, _ohlc.l[i - 1] - 0.1, s='B4', color='blue')

    # tick labels date by month
    plt.xticks(ticks=np.arange(0, lenth, step=20),
               labels=_ohlc.t[::20], rotation=30, size=7)

    # asset here you have, and starts with 1
    # A stragety with k, avrp-arip, box/grid
    ax_2 = plt.subplot2grid((4, 4), (3, 0), rowspan=1, colspan=4)
    # grid
    plt.grid(True, which='both', ls='dashed')
    asset = list(1 for _ in range(lenth))
    # inverse stragety enhanced with k speed up
    # fisrt n days no operation
    for i in range(n + 2, lenth):
        # inverse
        # to make sure the real inverse happens
        # 1. red candle
        # 2. avrp-arip cross
        # 3. avrp-arip diff limit
        # 4. box limit by Fibonacci
        if k[i - 1] > 0 and e_rpt_s[lenth - i] == str(n) + '日反转'\
                and _ohlc.c[i - 1] > _ohlc.o[i - 1]\
                and ((_factor.avrp[i - 1] > _factor.arip[i - 1] - 0.01
                        and _factor.avrp[i - 2] - 0.01 < _factor.arip[i - 2])
                    or (_factor.avrp[i - 2] > _factor.arip[i - 2] - 0.01
                        and _factor.avrp[i - 3] - 0.01 < _factor.arip[i - 3]))\
                and _factor.box[i - 1] < 0.618:
            asset[i] = (_ohlc.c[i]/_ohlc.c[i - 1])*asset[i - 1]
        # inverse enhance
        # 1. inverse happened before the day
        # 2. red candle
        # 3. speed up happened today
        # 4. avrp-arip diff limit by Fibonacci
        # 5. box limit by Fibonacci
        elif k[i - 2] > 0 and e_rpt_s[lenth - i + 1] == str(n) + '日反转' \
                and _ohlc.c[i - 2] > _ohlc.o[i - 2] \
                and ((_factor.avrp[i - 2] > _factor.arip[i - 2] - 0.01
                        and _factor.avrp[i - 3] - 0.01 < _factor.arip[i - 3])
                    or (_factor.avrp[i - 3] > _factor.arip[i - 3] - 0.01
                        and _factor.avrp[i - 4] - 0.01 < _factor.arip[i - 4]))\
                and e_rpt_s[lenth - i] == '加速' \
                and (_factor.avrp[i - 2] - _factor.arip[i - 2]) / (_factor.avrp[i - 1] - _factor.arip[i - 1]) > 0.618\
                and _factor.box[i - 2] < 0.618\
                and _factor.box[i - 1] < 0.618:
            asset[i] = (_ohlc.c[i]/_ohlc.c[i - 1])*asset[i - 1]
        # right trade trending follow
        # 1. at least 2 days k > 0
        # 2. red candle today
        # 3. avrp-arip diff limit by Fibonacci
        elif (k[i - 1] > 0 and _factor.avrp[i - 1] > _factor.arip[i - 1]
                and _ohlc.c[i - 1] > _ohlc.o[i - 1]) \
                and (k[i - 2] > 0 and _factor.avrp[i - 2] > _factor.arip[i - 2])\
                and (_factor.avrp[i - 2] - _factor.arip[i - 2]) / (_factor.avrp[i - 1] - _factor.arip[i - 1]) > 0.618:
            asset[i] = (_ohlc.c[i]/_ohlc.c[i - 1])*asset[i - 1]
        # high risk right trade by down strike and avr line
        elif e_rpt_s[lenth - i] == str(n) + '日反转'\
            and k[i - 1] < 0\
            and _ohlc.c[i - 1] < _ohlc.o[i - 1]\
            and (_ohlc.c[i - 1] - _ohlc.l[i - 1]) / (_ohlc.o[i - 1] - _ohlc.c[i - 1]) > 1\
            and _factor.box[i - 1] < 0.618:
            asset[i] = (_ohlc.c[i]/_ohlc.c[i - 1])*asset[i - 1]
        else:
            asset[i] = asset[i - 1]
    # plot the aseet line
    plt.plot(np.arange(0, lenth, 1), asset, color='blue',
             label='净值曲线', marker='o', markersize=1)

    # label location
    plt.legend(loc='best')

    # tick setting
    # major tick is half a month
    majorLocator = MultipleLocator(10)
    # minor tick in 2 days
    minorLocator = MultipleLocator(2)
    # tick show setting
    ax_1.xaxis.set_major_locator(majorLocator)
    ax_1.xaxis.set_minor_locator(minorLocator)
    ax_2.xaxis.set_minor_locator(minorLocator)
    # tick labels date by month
    plt.xticks(ticks=np.arange(0, lenth, step=20),
               labels=_ohlc.t[::20], rotation=30, size=7)
    # font setting
    plt.rcParams["font.sans-serif"] = ["HanaMinA"]
    # title
    plt.title(stock_name)
    plt.tight_layout()
    plt.show()
    # reset var
    del _factor.avrp[0: lenth], _factor.arip[0: lenth], _ohlc.t[0: lenth], _factor.mav[0: lenth]


def name_wash(csvpath):
    """wash the the stock name out"""
    stock_name = re.sub(r'[:\\_a-zA-Z/.]', "", csvpath)
    return stock_name


def main_chart():
    """control the whole chart's drawing."""
    print('csv文件路径: ', end='')
    p = input()
    stock_name = name_wash(csvpath=p)
    # get dayine dataframe
    dayline = csv_wash(csvpath=p)
    # draw chart
    chart(dayline, stock_name)
